/*! \page notifications Notifications System

The DirectUI environment offers a notification system framework. Applications and other processes can use the notification system to inform the user about certain events. Good use cases for the notification system are for example:

- incoming email
- new instant message
- missed call

The notification system should not be used for temporary situations like various error cases. For example in the following situations some other mechanism than the notification system should be used:

- network connection is temporarily lost
- the user interacts with an application in a way that leads to an error case
- message to the user after the user has done something (e.g. "file deleted succesfully")

A notification is usually represented to the user with for example graphical, aural or tactile feedback - or a combination of these. The DUI notification API hides these details under the unified API. The system determines what kind of feedback should be used to present the notifications to the user. This means that the user of the notification system doesn't have exact control over how the notification is actually presented to the user.

The notifications can be grouped. It is up to the underlying system how grouped notifications will be shown. A usual way is to for example show one visual banner to the user representing a group of notifications. A notification group can have almost the same parameters - and hence e.g. visualisation - that single notifications have.

There is a C++ API available in DUI that developers can use to send and control notifications in the system. The underlying notification implementation is hidden from the user.

The relevant classes to developers are \c DuiNotification and \c DuiNotificationGroup. A notification can be sent by constructing an object of type \c DuiNotification and a notification group can be created by constructing an object of type \c DuiNotificationGroup.

\section parameters Notification parameters

There are similar parameters associated with both of these classes. Some of them are explained here.

\subsection eventType Event type

Notifications' presentation to the user is affected by the notification's event type. For example some specific sound could be played when a new e-mail arrives. The e-mail application would only set the correct event type for the notification and the notification system would take care of the rest. Similarly other parameters such as icons and images can be selected according to the event type.

Users of the notification system should always set the event type correctly. Users must not set the event type wrongly just to try to get some specific feedback (e.g. sound). For this the user can provide its own event type configuration as the event type system supports 3rd party event types.

At the moment the predefined event types, that are guaranteed to exist in the system are

    \li call
    \li im
    \li contact-request
    \li email
    \li sms
    \li system-update

\note
The event type definitions are not final and are subject to change.

\subsection actionURI Action URI

The action URI parameter specifies an action related to the notification. The action is usually triggered by something the user does. The action is returned to the application that sent the notification.

A typical user scenario would be for example the following. An e-mail application receives a new e-mail and sends a notification about this. The user sees a graphical notification on the screen and clicks it. The action related to the notification is triggered which commands the e-mail application to show the recently received e-mail.

From the above example it comes obvious that notification actions are application specific.

\note
The format of the action URI is not yet specified!

\subsection image Image

Specifies an image that is related to the notification. Usually this means that the image is shown in a graphical representation of the notification. The image parameter can be a logical name like 'Icon-messages' or an absolute path to an image file (e.g. <em>%/usr/share/pixmaps/foo.png</em>).

\subsection persistence Persistence

Notifications can be created as persistent, in which case the notification system stores the notifications and they are restored after a reboot. The user can get a list of stored notifications with a call to the static function \c DuiNotification::notifications().

\see

- DuiNotification
- DuiNotificationGroup
*/

