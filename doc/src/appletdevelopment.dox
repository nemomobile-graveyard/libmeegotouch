/*! \page appletdevelopment Applet development How-To

An applet is a small program ran in an applet runner process that can be embedded to a Mashup canvas (a.k.a. Experience canvas).

\section appletterminology Terminology

- \b Applet - is the package installed to the system that contains the binary and resources that offers the functionality of the applet
- \b Applet \b instance - is a running process of some applet. There can be multiple instances of an applet running simultaneously
- Applet lifecycle:
  - \b Add - A new applet instance is placed on the applet canvas (i.e. Desktop). Homescreen initiates an instance construction from applet binary. The same operation occurs when already added applet instance is restored after homescreen has been closed and reopened (e.g. when device has been turned off and back on). When applet instance is added for the first time to the canvas the applet instance specific data is empty. When applet instance is restored the applet instance specific data is restored from pre-closed state.
  - \b Close -An applet instance is closed. This might occur for instance when homescreen is shut down (e.g. when device is turned off). It's good to make a distinction between this and \b remove.
  - \b Remove - This occurs when an applet instance is removed from applet canvas. All applet instance specific data is removed. Also applet developer should remove any data it has stored for this particular applet instance. This means that applet instance is not added to the applet canvas again when homescreen is restarted the next time.

\section appletdevenv Development environment

For developing applets you need:
- libdui-dev

\section appletdevelopment Developing an applet

From a developers point of view an applet consists of a shared library, a metadata file and possibly some resources (such as images). All of these are put into a debian package to enable installation of applets to devices.

\image html appletdevelopment.png "Applet development classes"

\subsection appletclasses What classes to implement

From the user interface point of view an applet is a \c MWidget. So construct a \c MWidget class in whatever way fits your purposes: use one of the existing derived classes in libdui, do your own widget or whatever. This is the UI part of your applet.

Whatever approach you chose for constructing your applet \c MWidget, you need to offer a connection point for the host process to get a handle to it. For this you need to implement an interface called \c MAppletInterface. There is only a single method in this interface you need to implement:

\c MAppletInterface::constructWidget(const MAppletMetaData&, MDataStore&, MDataAccess&)

In this method you need to return a pointer to the \c MWidget of your applet.

\b Note: The ownership of the \c MWidget is transformed to the caller of this method, so \b you \b mustn't \b destroy the widget yourself.

You also need to use a couple of Qt macros to get things working. A complete example follows:

\code
// myapplet.h

#ifndef MYAPPLET_H
#define MYAPPLET_H
#include <MAppletInterface>
#include <QObject>
class MyApplet : public QObject, public MAppletInterface {
    Q_OBJECT
    Q_INTERFACES(MAppletInterface)
public:
    virtual MWidget *constructWidget(const MAppletMetaData &metadata, MDataStore& instanceData, MDataAccess& settings);
};
#endif // MYAPPLET_H
\endcode

\code
// myapplet.cpp

#include <QtGui>
#include <MWidget>
#include "myapplet.h"
Q_EXPORT_PLUGIN2(myapplet, MyApplet)
MWidget* MyApplet::constructWidget(const MAppletMetaData &metadata, MDataStore& instanceData, MDataAccess& settings) {
    return new MWidget();
}
\endcode

\subsection appletmetadata Create applet metadata

Applet metadata is defined in \c .desktop files following <a href="http://www.freedesktop.org/wiki/Specifications/desktop-entry-spec">freedesktop.org desktop entry specification</a>. Applet metadata extends \c .desktop entry specification by defining a new type \b X-MeeGoApplet. Applet metadata specification follows desktop entry specification so that required keys (\em Type, \em Name and \em Exec) have to be defined in the applet metadata.

\b Exec key in applet metadata defines the runner binary which is launched in separate process to run the applet binary. This key needs to be defined but can be left empty. If \b Exec key is left empty the applet is ran inside the host process.

Applet metadata extends the desktop specification with the following new keys. These keys need to be defined under group X-MeeGoApplet.

<table>
<tr>
 <th>Key</th>
 <th>Description</th>
 <th>Value Type</th>
 <th>Required</th>
</tr>
<tr>
  <td>Applet</td>
  <td>Defines the applet binary that will be loaded using the runner defined by the Exec key. This binary needs to be located in \c /usr/lib/dui/applets/ - directory.</td>
  <td>string</td>
  <td>YES</td>
</tr>
<tr>
  <td>Identifier</td>
  <td>Defines an identifier for the applet. The identifier is used for example defining the applet specific style resource locations.</td>
  <td>string (can contain characters [a-zA-Z0-9_-])</td>
  <td>NO</td>
</tr>
</table>

Following is an example of applet metadata specification:

\code
[Desktop Entry]
Type=X-MeeGoApplet
Name=ExampleApplet
Icon=Icon-music
Exec=duiappletrunner

[X-MeeGoApplet]
Applet=libexampleapplet.so
\endcode

\subsection appletinstallation Install

The shared library must be installed to \c /usr/lib/dui/applets/.

The metadata \c .desktop file must be installed to \c /usr/share/dui/applets/.

\subsection appletpackaging Packaging

Each Debian package can only contain one applet. If applets need to be bundled a meta package that depends on individual applet packages must be created.

The applet package must contain the following meta data:

\code
Maemo-Desktop-File: /usr/share/dui/applets/your-applet-desktop-file.desktop
\endcode

To add this to an applet package modify your \c debian/control file so that the section for the binary package of the applet contains

\code
XB-Maemo-Desktop-File: /usr/share/dui/applets/your-applet-desktop-file.desktop
\endcode

\section appletservices Other services offered to applets

\subsection appletinstancedata Applet instance data

The applet system provides the applet instances with an object that can be used to store applet instance specific data to a permanent storage. Instance specific data is something that is not needed anymore when the applet instance is removed. Instance specific data includes any data that the applet needs to restore an instance. The instance data object is an object that implements the \c MDataStore interface.

Applets don't create their own objects of the instance data classes but instead they are provided with one that they should use. The instance data object is provided to the applets via the \c MAppletInterface::constructWidget(const MAppletMetaData&, MDataStore&, MDataAccess&) call as the second argument.

Whenever the state of an applet instance changes in a way that affects on how the applet instance would be restored, the applet should update the data.

\subsection appletsettings Applet settings

Applets can have settings which can be accessed by the user from the settings dialog. There are two different kinds of settings: \b global and \b instance settings. Global settings affect all running instances of a given applet. Instance settings on the other hand only affect the applet instance that they are associated with.

The settings can be accessed by the applet code through the interface offered via the \c MAppletInterface::constructWidget(const MAppletMetaData&, MDataStore&, MDataAccess&) call as the third argument.

The instance and global settings are both accessed through this same interface. The user of the settings object can't really tell the difference between instance and global settings - they are intermixed.

\b Important: if there is a setting defined with the same name in both the global and instance settings, the global setting gets shadowed by the instance setting. It's the applet developers responsibility to avoid such situations. So as an applet developer: don't specify any settings in both global and instance settings with the same name.

The settings of an applet are defined with a <a href="settingslanguageschema.html">settings language</a>. The global and instance settings are defined in separate files. An applet can have both of the settings files present, either one or neither. It is totally up to the applet's use case what kind of settings it needs to have.

The titles of the various settings can be localized, by providing a translation id as the value for the title attribute in the settings xml file. If localization of a title is not required, it can be written as such in the attribute. This requires that the translation catalogs contain only ids with some prefix so they don't conflict with common words.

A part of the names of the settings files is taken from the applet metadata file basename. For example, if the applet's metadata file is <tt>myapplet.desktop</tt>, it's  basename is \c myapplet. The corresponding file names for the settings files would be \b myapplet-instance.xml and \b myapplet-global.xml for instance and global settings respectively.

The installation location for both of these files is the <tt>/usr/share/dui/applets/settings</tt> directory.

\subsection appletcontainer Container communication API

Applet may be reparented to a MContainer by MMashupCanvas. MContainer can expose optional applet information on its titlebar, including icon, title and additional informative text.To make an applet reside in a container, set the container-mode property in style sheet of the mashup canvas. An example taken from base style sheet of mashup canvas looks like 

\code
MMashupCanvasStyle {
    container-mode:true;
}
\endcode

As shown above, default settings for container-mode property is true. When the container-mode property is true(default), an applet is embedded as shown \image html containermodeon.png "Container mode on(default)" 

When container-mode property to false applet looks like: \image html containermodeoff.png "Container mode off" 

Use following properties and signals in your applet widget class to communicate applet information:

\code
Q_PROPERTY(QString appletIcon READ icon WRITE setIcon)
Q_PROPERTY(QString appletTitle READ title WRITE setTitle)
Q_PROPERTY(QString appletText READ text WRITE setText)

signals:
    // change icon in MContainer
    void appletIconChanged(QString newIcon);

    // change title in MContainer
    void appletTitleChanged(QString newTitle);

    // change additional text in MContainer
    void appletTextChanged(QString newText);
\endcode

The property and signal names must be as stated above. The property access function names can differ.

\subsection appletidentifier Applet identifier

Every applet has an applet identifier that is used in a few places in the applet system. The applet identifier is a string that uniquely identifies the applet. Note however that the applet identifier is not an applet instance specific identifier.

The applet identifier is determined like this:
- If an identifier (<tt>Identifier</tt>) is specified in the \ref appletmetadata "applet metadata" (and it is valid), that is used
  - If the identifier in the metadata is not specified or it can't be used (e.g. it is ill-formed) an identifier is extracted from the applet shared library name:
    - Assuming your applet is packaged to a shared library called <tt>lib<strong>exampleapplet</strong>.so</tt>, the identifier will be <strong>exampleapplet</strong>.

\subsection appletstyling Applet styling

Applets can define their own styles just like any other applications in the MeeGo Touch world. Styling is done with style sheets and images in the \ref styling "usual way". The only important thing with applets is the location of the style resources.

The \ref appletidentifier "applet identifier" is used in the construction of the resource location. The applet identifier is used as the application name in the directory name. See \ref theme_structure for more information about the directory locations.

\subsection appletinternationalisation Applet internationalisation

For the most part all \ref i18n "internationalisation guidelines" apply to applets as well. The only thing to notice is that the \ref appletidentifier "applet identifier" is used as the translation catalog name.

\section applettools Tools to help development

The <tt>dui-dev-tools</tt> package includes a tool called <tt>duiapplettester</tt>. This tool can be used to test applets. The tool loads an applet to a window where it can be tested by interacting with it and visually checking the results. It's also easy to run the applet in a debugger tool with this tool.

You can load an applet with duiapplettester by commanding:

\code
duiapplettester <metadatafile>
\endcode

where &lt;metadatafile&gt; is the metadata file name of the applet.

\b Note that the applet must be installed to the system before \em duiapplettester can use it.

The \em duiapplettester also supports applet settings. The settings can be accessed by opening the context menu for the applet (right mouse button clicking the applet on an environment that has a mouse).

\section appletenablers Applet enablers

You don't necessarily need to write your own applet from scratch. You can use one of the general purpose "enabling applets" such as the WWF (Web Widget Framework) or Python applet.

\section appletpreconfiguring Preconfiguring applets on a mashup canvas

The following information is only meant for application developers who want to preconfigure
which applets will appear on the mashup canvas by default. Applet developers do not need this
information.

Each mashup canvas stores information about the applets instantiated on that particular canvas
in the ~user/.config/appname/canvasname.data file. If this file does not exist when the mashup
canvas is instantiated the global defaults are copied from /etc/xdg/appname/canvasname.data if
that file exists. This file should be supplied by the application developer if there is a need
to define which applets should be instantiated on a particular canvas by default.

An example data file follows:

\code
[1]
desktopFile=/usr/share/dui/applets/myapplet.desktop
private\layoutIndex=0

[2]
desktopFile=/usr/share/dui/applets/someotherapplet.desktop
private\layoutIndex=1
\endcode

The value in brackets is a canvas specific applet identifier, which is an unsigned integer
starting from 1. The value of the desktopFile key defines the .desktop file which contains
the information for this particular applets. The private\\layoutIndex key contains the
applet's location in the layout (which is currently just an index - this will change in the
future).
  
To be able to define different configurations for different purposes the application package
should not contain this file. Instead, there should be a settings template package for the
application which can be instantiated for different configurations. For an example how to
achieve this refer to the duihomescreen-settings-template package. It contains example
ConfML, XSLT and GCFML files for the MeeGo Touch Home Screen package in the conf directory, the
necessary debian packaging files in the debian directory and tests in the tests directory.
An instantiated version of the template, duihomescreen-settings-default, which also contains
the sources, can be fetched with apt-get source duihomescreen-settings-default.

\see

- MMashupCanvas
- MAppletInterface
- MAppletMetaData
- MDataStore
- MDataAccess
*/

