/*
 * This file was generated by /home/dandrader/libmeegotouch/tools/m-servicefwgen
 * Command line was: /home/dandrader/libmeegotouch/tools/m-servicefwgen -c FtMServiceFwGen1Proxy -p ftmservicefwgen1proxy com.nokia.FtMServiceFwGen1-25080.xm
 *
 * /home/dandrader/libmeegotouch/tools/m-servicefwgen is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FTMSERVICEFWGEN1PROXY_H_1322652134
#define FTMSERVICEFWGEN1PROXY_H_1322652134

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include <Qt> // for Qt::HANDLE
#include <MApplication>
#include <MWindow>

namespace fakegalleryserviceinterface {

/*
 * Proxy class for interface com.nokia.fakegalleryserviceinterface
 */
class FtMServiceFwGen1Proxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.fakegalleryserviceinterface"; }

public:
    FtMServiceFwGen1Proxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~FtMServiceFwGen1Proxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> bug172441(const QString &_taskTitle)
    {
        Qt::HANDLE windowId = 0;

        if ( MApplication::instance() )
        {
            MWindow *win = MApplication::instance()->activeWindow();
            if ( win ) {
                windowId = win->effectiveWinId();
            }
        }
        else
        {
            QWidget *widget = qApp->activeWindow();
            if ( widget ) {
                windowId = widget->effectiveWinId();
            }
        }

        QList<QVariant> argumentList;
        argumentList << qVariantFromValue((uint)windowId);
        argumentList << qVariantFromValue(_taskTitle);
        return asyncCallWithArgumentList(QLatin1String("bug172441"), argumentList);
    }

    inline QDBusPendingReply<bool> showGridWithCapturedContent(int limit)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(limit);
        return asyncCallWithArgumentList(QLatin1String("showGridWithCapturedContent"), argumentList);
    }

    inline QDBusPendingReply<bool> showImage(const QString &uri, const QString &playlistName, const QString &defaultBackPage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri) << qVariantFromValue(playlistName) << qVariantFromValue(defaultBackPage);
        return asyncCallWithArgumentList(QLatin1String("showImage"), argumentList);
    }

    inline QDBusPendingReply<> showImage(const QString &uri, const QStringList &uriList, const QString &_taskTitle)
    {
        Qt::HANDLE windowId = 0;

        if ( MApplication::instance() )
        {
            MWindow *win = MApplication::instance()->activeWindow();
            if ( win ) {
                windowId = win->effectiveWinId();
            }
        }
        else
        {
            QWidget *widget = qApp->activeWindow();
            if ( widget ) {
                windowId = widget->effectiveWinId();
            }
        }

        QList<QVariant> argumentList;
        argumentList << qVariantFromValue((uint)windowId);
        argumentList << qVariantFromValue(_taskTitle);
        argumentList << qVariantFromValue(uri) << qVariantFromValue(uriList);
        return asyncCallWithArgumentList(QLatin1String("showImage"), argumentList);
    }

    inline QDBusPendingReply<bool> showPage(const QString &targetPage, const QString &previousPage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(targetPage) << qVariantFromValue(previousPage);
        return asyncCallWithArgumentList(QLatin1String("showPage"), argumentList);
    }

    inline QDBusPendingReply<bool> showSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("showSettings"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void captureCompleted(const QString &mode, const QString &fileName);
};

namespace com {
  namespace nokia {
    typedef ::fakegalleryserviceinterface::FtMServiceFwGen1Proxy fakegalleryserviceinterface;
  }
}

}; // namespace

#endif
