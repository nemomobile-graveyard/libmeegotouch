/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c FtMServiceFwGen1Proxy -p ftmservicefwgen1proxy com.nokia.FtMServiceFwGen1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FTMSERVICEFWGEN1PROXY_H_1271167524
#define FTMSERVICEFWGEN1PROXY_H_1271167524

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include <MApplication>
#include <MApplicationWindow>
#include <MApplicationIfProxy>
#include <MComponentData>
#include <QX11Info>
#include <X11/Xutil.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xmd.h>

/*
 * Proxy class for interface com.nokia.fakegalleryserviceinterface
 */
class FtMServiceFwGen1Proxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.fakegalleryserviceinterface"; }

public:
    FtMServiceFwGen1Proxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~FtMServiceFwGen1Proxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> showGridWithCapturedContent(int limit)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(limit);
        return asyncCallWithArgumentList(QLatin1String("showGridWithCapturedContent"), argumentList);
    }

    inline QDBusPendingReply<bool> showImage(const QString &uri, const QString &playlistName, const QString &defaultBackPage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uri) << qVariantFromValue(playlistName) << qVariantFromValue(defaultBackPage);
        return asyncCallWithArgumentList(QLatin1String("showImage"), argumentList);
    }

    inline QDBusPendingReply<> showImage(const QString &uri, const QStringList &uriList)
    {
        Qt::HANDLE windowId       = MApplication::instance()->activeWindow()->winId();
        QString windowTitle       = MApplication::instance()->activeWindow()->windowTitle();
        QString goBackServiceName = MComponentData::instance()->serviceName();

        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(goBackServiceName);
        argumentList << qVariantFromValue(windowTitle);
        argumentList << qVariantFromValue((uint)windowId);
        argumentList << qVariantFromValue(uri) << qVariantFromValue(uriList);

        // hide this window
        {
            // Tell the window to not to be shown in the switcher
            Atom skipTaskbarAtom = XInternAtom(QX11Info::display(), "_NET_WM_STATE_SKIP_TASKBAR", False);

            Atom netWmStateAtom = XInternAtom(QX11Info::display(), "_NET_WM_STATE", False);
            QVector<Atom> atoms;
            atoms.append(skipTaskbarAtom);
            XChangeProperty(QX11Info::display(), windowId, netWmStateAtom, XA_ATOM, 32,
                            PropModeReplace, (unsigned char *)atoms.data(), atoms.count());
            XSync(QX11Info::display(), False);
        }

        return asyncCallWithArgumentList(QLatin1String("showImage"), argumentList);
    }

    inline QDBusPendingReply<bool> showPage(const QString &targetPage, const QString &previousPage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(targetPage) << qVariantFromValue(previousPage);
        return asyncCallWithArgumentList(QLatin1String("showPage"), argumentList);
    }

    inline QDBusPendingReply<bool> showSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("showSettings"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace nokia {
    typedef ::FtMServiceFwGen1Proxy fakegalleryserviceinterface;
  }
}
#endif
