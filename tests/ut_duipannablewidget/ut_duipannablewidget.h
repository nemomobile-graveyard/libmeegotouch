/***************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (directui@nokia.com)
**
** This file is part of libdui.
**
** If you have questions regarding the use of this file, please contact
** Nokia at directui@nokia.com.
**
** This library is free software; you can redistribute it and/or
** modify it under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation
** and appearing in the file LICENSE.LGPL included in the packaging
** of this file.
**
****************************************************************************/

#ifndef UT_DUIPANNABLEWIDGET_HH
#define UT_DUIPANNABLEWIDGET_HH


#include <QtTest/QtTest>
#include <QObject>
#include "duiapplication.h"
class DuiPannableWidget;
class QGraphicsWidget;
class StateTransitionResult;

// Required to insert QList<QEvent*> instances to the test data.
Q_DECLARE_METATYPE(QList<QEvent *>);

class Ut_DuiPannableWidget : public QObject
{
    Q_OBJECT

public:

    /** Result generated by running a test case. */
    StateTransitionResult *_currentResult;

private:
    DuiApplication *app;

    /** Pannable widget instance under testing. */
    DuiPannableWidget *_widget;

//    /** Event enumerator for timeout events. */
//    int _timeoutType;

private slots:
    void initTestCase();
    void cleanupTestCase();

    void init();
    void cleanup();

    void testWaitState_data();
    void testEvaluateState_data();
    void testPanState_data();
    void testWaitState();
    void testEvaluateState();
    void testPanState();
    void testRightMouseButton();

    void usingCustomPhysics();
    void settingNewPhysicsShouldEmitPhysicsChangeSignal();
    void settingPhysicsToNULLShouldNotBreakTheWidget();

private:

    /**
     * Helper method to create test data with all possible input events
     * @param results List of results that the test widget should reach
     * when events are triggered.
     */
    void createTestData(QList<StateTransitionResult> results);

    /**
     * Helper method which tests state transitions using the already set-up
     * test data and already set-up test widget.
     */
    void testStateTransitions();
};


#endif
