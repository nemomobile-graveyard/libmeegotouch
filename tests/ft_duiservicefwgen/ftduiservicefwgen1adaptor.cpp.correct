/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c FtDuiServiceFwGen1Adaptor -a ftduiservicefwgen1adaptor com.nokia.FtDuiServiceFwGen1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "ftduiservicefwgen1adaptor.h"

#include <DuiApplication>
#include <DuiApplicationPage>
#include <DuiApplicationWindow>
#include <DuiApplicationIfProxy>
#include <DuiEscapeButtonPanel>
#include <QX11Info>
#include <X11/Xutil.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xmd.h>

#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FtDuiServiceFwGen1Adaptor
 */

FtDuiServiceFwGen1Adaptor::FtDuiServiceFwGen1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent),
    backServiceName(),
    windowId(-1)
{
    // constructor
    setAutoRelaySignals(true);
}

FtDuiServiceFwGen1Adaptor::~FtDuiServiceFwGen1Adaptor()
{
    // destructor
}

bool FtDuiServiceFwGen1Adaptor::showGridWithCapturedContent(int limit)
{
    // handle method call com.nokia.fakegalleryserviceinterface.showGridWithCapturedContent
    bool out0;
    QMetaObject::invokeMethod(parent(), "showGridWithCapturedContent", Q_RETURN_ARG(bool, out0), Q_ARG(int, limit));
    return out0;
}

bool FtDuiServiceFwGen1Adaptor::showImage(const QString &uri, const QString &playlistName, const QString &defaultBackPage)
{
    // handle method call com.nokia.fakegalleryserviceinterface.showImage
    bool out0;
    QMetaObject::invokeMethod(parent(), "showImage", Q_RETURN_ARG(bool, out0), Q_ARG(QString, uri), Q_ARG(QString, playlistName), Q_ARG(QString, defaultBackPage));
    return out0;
}

void FtDuiServiceFwGen1Adaptor::showImage(const QString &backServiceName, const QString &windowTitle, const uint windowId, const QString &uri, const QStringList &uriList)
{
    this->windowId = windowId;
    this->backServiceName = backServiceName;

    // handle method call com.nokia.fakegalleryserviceinterface.showImage
    QMetaObject::invokeMethod(parent(), "showImage", Q_ARG(QString, uri), Q_ARG(QStringList, uriList));

    DuiApplication::instance()->activeWindow()->setWindowTitle( windowTitle );
    DuiApplicationWindow *appWindow = DuiApplication::activeApplicationWindow();
    if (appWindow != 0) {
        appWindow->currentPage()->setEscapeMode( DuiApplicationPageModel::EscapeManualBack );
        // connect to the back button - assumes the above 'showImage' opens a
        // new window and so the window referred to below is already the top one
        connect(appWindow->currentPage(), SIGNAL(backButtonClicked()),
                this, SLOT(goBack()));
    }

    // update the X server
    {
        XPropertyEvent p;
        p.send_event = True;
        p.display = QX11Info::display();
        p.type   = PropertyNotify;
        p.window = RootWindow(p.display, 0);
        p.atom   = XInternAtom(p.display, "_NET_CLIENT_LIST", False);
        p.state  = PropertyNewValue;
        p.time   = CurrentTime;
        XSendEvent(p.display, p.window, False, PropertyChangeMask,
                (XEvent*)&p);

        XSync(QX11Info::display(), False);
    }

}

bool FtDuiServiceFwGen1Adaptor::showPage(const QString &targetPage, const QString &previousPage)
{
    // handle method call com.nokia.fakegalleryserviceinterface.showPage
    bool out0;
    QMetaObject::invokeMethod(parent(), "showPage", Q_RETURN_ARG(bool, out0), Q_ARG(QString, targetPage), Q_ARG(QString, previousPage));
    return out0;
}

bool FtDuiServiceFwGen1Adaptor::showSettings()
{
    // handle method call com.nokia.fakegalleryserviceinterface.showSettings
    bool out0;
    QMetaObject::invokeMethod(parent(), "showSettings", Q_RETURN_ARG(bool, out0));
    return out0;
}

void FtDuiServiceFwGen1Adaptor::goBack()
{
    qDebug() << __PRETTY_FUNCTION__;

    bool backServiceRegistered = ( windowId != -1 );
    if ( backServiceRegistered ) {
        DuiApplicationIfProxy duiApplicationIfProxy(backServiceName, this);

        if (duiApplicationIfProxy.connection().isConnected()) {
            qDebug() << "Launching " << backServiceName;
            duiApplicationIfProxy.launch();
        } else {
            qWarning() << "Could not launch" << backServiceName;
            qWarning() << "DBus not connected?";
        }

        // unhide the chain parent's window
        {
            // Tell the window to not to be shown in the switcher
            XDeleteProperty(QX11Info::display(), windowId, XInternAtom(QX11Info::display(), "_NET_WM_STATE", False));
            XSync(QX11Info::display(), False);
        }

        qWarning() << "quitting - bye bye";
        QTimer::singleShot( 0, QApplication::instance(), SLOT( quit() ) );
    } else {
        qWarning() << "backService is not registered: not going back";
    }
}
